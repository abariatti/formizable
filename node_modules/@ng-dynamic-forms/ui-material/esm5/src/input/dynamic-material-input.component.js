var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Optional, Output, ViewChild } from "@angular/core";
import { FormGroup } from "@angular/forms";
import { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_LABEL_GLOBAL_OPTIONS, MAT_RIPPLE_GLOBAL_OPTIONS, MatAutocomplete, MatInput } from "@angular/material";
import { DynamicFormLayoutService, DynamicFormValidationService, DynamicInputModel } from "@ng-dynamic-forms/core";
import { DynamicMaterialFormInputControlComponent } from "../dynamic-material-form-input-control.component";
var DynamicMaterialInputComponent = /** @class */ (function (_super) {
    __extends(DynamicMaterialInputComponent, _super);
    function DynamicMaterialInputComponent(layoutService, validationService, AUTOCOMPLETE_OPTIONS, LABEL_OPTIONS, RIPPLE_OPTIONS) {
        var _this = _super.call(this, layoutService, validationService) || this;
        _this.layoutService = layoutService;
        _this.validationService = validationService;
        _this.AUTOCOMPLETE_OPTIONS = AUTOCOMPLETE_OPTIONS;
        _this.LABEL_OPTIONS = LABEL_OPTIONS;
        _this.RIPPLE_OPTIONS = RIPPLE_OPTIONS;
        _this.bindId = true;
        _this.blur = new EventEmitter();
        _this.change = new EventEmitter();
        _this.customEvent = new EventEmitter();
        _this.focus = new EventEmitter();
        return _this;
    }
    DynamicMaterialInputComponent.decorators = [
        { type: Component, args: [{
                    selector: "dynamic-material-input",
                    template: "<mat-form-field [color]=\"model.getAdditional('color', 'primary')\"\n                [floatLabel]=\"model.getAdditional('floatLabel', LABEL_OPTIONS && LABEL_OPTIONS['float'] || 'auto')\"\n                [formGroup]=\"group\"\n                [hideRequiredMarker]=\"model.getAdditional('hideRequiredMarker', false)\"\n                [ngClass]=\"getClass('grid','control')\"\n                [textMask]=\"{mask: (model.mask || false), showMask: model.mask && !(model.placeholder)}\">\n\n    <ng-container *ngIf=\"model.label\" ngProjectAs=\"mat-label\">\n\n        <mat-label>{{ model.label }}</mat-label>\n\n    </ng-container>\n\n    <span *ngIf=\"model.prefix\" matPrefix [innerHTML]=\"model.prefix\"></span>\n\n    <input matInput\n           [attr.accept]=\"model.accept\"\n           [attr.list]=\"model.listId\"\n           [attr.max]=\"model.max\"\n           [attr.min]=\"model.min\"\n           [attr.multiple]=\"model.multiple\"\n           [attr.step]=\"model.step\"\n           [autocomplete]=\"model.autoComplete\"\n           [autofocus]=\"model.autoFocus\"\n           [formControlName]=\"model.id\"\n           [id]=\"bindId ? model.id : null\"\n           [maxlength]=\"model.maxLength\"\n           [matAutocomplete]=\"matAutocomplete\"\n           [minlength]=\"model.minLength\"\n           [name]=\"model.name\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [pattern]=\"model.pattern\"\n           [placeholder]=\"model.placeholder\"\n           [readonly]=\"model.readOnly\"\n           [required]=\"model.required\"\n           [spellcheck]=\"model.spellCheck\"\n           [tabindex]=\"model.tabIndex\"\n           [type]=\"model.inputType\"\n           (blur)=\"onBlur($event)\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\"/>\n\n    <span *ngIf=\"model.suffix\" matSuffix [innerHTML]=\"model.suffix\"></span>\n\n    <mat-hint *ngIf=\"model.hint !== null\" align=\"start\" [innerHTML]=\"model.hint\"></mat-hint>\n\n    <mat-hint *ngIf=\"showCharacterHint\" align=\"end\">{{ characterHint }}</mat-hint>\n\n    <ng-container *ngFor=\"let message of errorMessages\" ngProjectAs=\"mat-error\">\n\n        <mat-error *ngIf=\"showErrorMessages\">{{ message }}</mat-error>\n\n    </ng-container>\n\n</mat-form-field>\n\n<mat-autocomplete #matAutocomplete=\"matAutocomplete\"\n                  [autoActiveFirstOption]=\"model.getAdditional('autoActiveFirstOption', AUTOCOMPLETE_OPTIONS['autoActiveFirstOption'])\"\n                  [disableRipple]=\"model.getAdditional('disableRipple', RIPPLE_OPTIONS && RIPPLE_OPTIONS['disabled'] || false)\"\n                  (optionSelected)=\"onChange($event)\">\n\n    <mat-option *ngFor=\"let option of model.list\" [value]=\"option\">{{ option }}</mat-option>\n\n</mat-autocomplete>",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    DynamicMaterialInputComponent.ctorParameters = function () { return [
        { type: DynamicFormLayoutService, },
        { type: DynamicFormValidationService, },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] },] },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_LABEL_GLOBAL_OPTIONS,] }, { type: Optional },] },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }, { type: Optional },] },
    ]; };
    DynamicMaterialInputComponent.propDecorators = {
        "bindId": [{ type: Input },],
        "group": [{ type: Input },],
        "layout": [{ type: Input },],
        "model": [{ type: Input },],
        "blur": [{ type: Output },],
        "change": [{ type: Output },],
        "customEvent": [{ type: Output },],
        "focus": [{ type: Output },],
        "matAutocomplete": [{ type: ViewChild, args: ["matAutocomplete",] },],
        "matInput": [{ type: ViewChild, args: [MatInput,] },],
    };
    return DynamicMaterialInputComponent;
}(DynamicMaterialFormInputControlComponent));
export { DynamicMaterialInputComponent };
function DynamicMaterialInputComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    DynamicMaterialInputComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    DynamicMaterialInputComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    DynamicMaterialInputComponent.propDecorators;
    /** @type {?} */
    DynamicMaterialInputComponent.prototype.bindId;
    /** @type {?} */
    DynamicMaterialInputComponent.prototype.group;
    /** @type {?} */
    DynamicMaterialInputComponent.prototype.layout;
    /** @type {?} */
    DynamicMaterialInputComponent.prototype.model;
    /** @type {?} */
    DynamicMaterialInputComponent.prototype.blur;
    /** @type {?} */
    DynamicMaterialInputComponent.prototype.change;
    /** @type {?} */
    DynamicMaterialInputComponent.prototype.customEvent;
    /** @type {?} */
    DynamicMaterialInputComponent.prototype.focus;
    /** @type {?} */
    DynamicMaterialInputComponent.prototype.matAutocomplete;
    /** @type {?} */
    DynamicMaterialInputComponent.prototype.matInput;
    /** @type {?} */
    DynamicMaterialInputComponent.prototype.layoutService;
    /** @type {?} */
    DynamicMaterialInputComponent.prototype.validationService;
    /** @type {?} */
    DynamicMaterialInputComponent.prototype.AUTOCOMPLETE_OPTIONS;
    /** @type {?} */
    DynamicMaterialInputComponent.prototype.LABEL_OPTIONS;
    /** @type {?} */
    DynamicMaterialInputComponent.prototype.RIPPLE_OPTIONS;
}
//# sourceMappingURL=dynamic-material-input.component.js.map