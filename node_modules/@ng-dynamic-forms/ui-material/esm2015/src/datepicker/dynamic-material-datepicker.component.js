/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Optional, Output, ViewChild } from "@angular/core";
import { FormGroup } from "@angular/forms";
import { MAT_LABEL_GLOBAL_OPTIONS, MatDatepicker, MatInput } from "@angular/material";
import { DynamicDatePickerModel, DynamicFormLayoutService, DynamicFormValidationService, DynamicFormControlComponent } from "@ng-dynamic-forms/core";
export class DynamicMaterialDatePickerComponent extends DynamicFormControlComponent {
    /**
     * @param {?} layoutService
     * @param {?} validationService
     * @param {?} LABEL_OPTIONS
     */
    constructor(layoutService, validationService, LABEL_OPTIONS) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.LABEL_OPTIONS = LABEL_OPTIONS;
        this.bindId = true;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicMaterialDatePickerComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-material-datepicker",
                template: "<mat-form-field [color]=\"model.getAdditional('color', 'primary')\"\n                [floatLabel]=\"model.getAdditional('floatLabel', LABEL_OPTIONS && LABEL_OPTIONS['float'] || 'auto')\"\n                [formGroup]=\"group\"\n                [hideRequiredMarker]=\"model.getAdditional('hideRequiredMarker', false)\"\n                [ngClass]=\"getClass('grid', 'control')\">\n\n    <ng-container *ngIf=\"model.label\" ngProjectAs=\"mat-label\">\n\n        <mat-label>{{ model.label }}</mat-label>\n\n    </ng-container>\n\n    <span *ngIf=\"model.prefix\" matPrefix [innerHTML]=\"model.prefix\"></span>\n\n    <input matInput\n           [autofocus]=\"model.autoFocus\"\n           [formControlName]=\"model.id\"\n           [id]=\"bindId ? model.id : null\"\n           [max]=\"model.max\"\n           [matDatepicker]=\"matDatepicker\"\n           [min]=\"model.min\"\n           [name]=\"model.name\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [placeholder]=\"model.placeholder\"\n           [readonly]=\"model.readOnly\"\n           [required]=\"model.required\"\n           (blur)=\"onBlur($event)\"\n           (dateChange)=\"onChange($event)\"\n           (dateInput)=\"onCustomEvent($event, 'dateInput')\"\n           (focus)=\"onFocus($event)\"/>\n\n    <span *ngIf=\"model.suffix\" matSuffix [innerHTML]=\"model.suffix\"></span>\n\n    <mat-hint *ngIf=\"model.hint !== null\" align=\"start\" [innerHTML]=\"model.hint\"></mat-hint>\n\n\n    <mat-datepicker-toggle matSuffix [for]=\"matDatepicker\"></mat-datepicker-toggle>\n\n    <mat-datepicker #matDatepicker\n                    [opened]=\"model.getAdditional('opened', false)\"\n                    [startAt]=\"model.focusedDate\"\n                    [startView]=\"model.getAdditional('startView', 'month')\"\n                    [touchUi]=\"model.getAdditional('touchUi', false)\"\n                    (closed)=\"onCustomEvent($event, 'closed')\"\n                    (opened)=\"onCustomEvent($event, 'opened')\"></mat-datepicker>\n\n\n    <ng-container *ngFor=\"let message of errorMessages\" ngProjectAs=\"mat-error\">\n\n        <mat-error *ngIf=\"showErrorMessages\">{{ message }}</mat-error>\n\n    </ng-container>\n\n</mat-form-field>",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
DynamicMaterialDatePickerComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService, },
    { type: DynamicFormValidationService, },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_LABEL_GLOBAL_OPTIONS,] }, { type: Optional },] },
];
DynamicMaterialDatePickerComponent.propDecorators = {
    "bindId": [{ type: Input },],
    "group": [{ type: Input },],
    "layout": [{ type: Input },],
    "model": [{ type: Input },],
    "blur": [{ type: Output },],
    "change": [{ type: Output },],
    "customEvent": [{ type: Output },],
    "focus": [{ type: Output },],
    "matDatePicker": [{ type: ViewChild, args: ["matDatepicker",] },],
    "matInput": [{ type: ViewChild, args: [MatInput,] },],
};
function DynamicMaterialDatePickerComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    DynamicMaterialDatePickerComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    DynamicMaterialDatePickerComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    DynamicMaterialDatePickerComponent.propDecorators;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.bindId;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.group;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.layout;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.model;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.blur;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.change;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.customEvent;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.focus;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.matDatePicker;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.matInput;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.layoutService;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.validationService;
    /** @type {?} */
    DynamicMaterialDatePickerComponent.prototype.LABEL_OPTIONS;
}
//# sourceMappingURL=dynamic-material-datepicker.component.js.map