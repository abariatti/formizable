/*!
@ng-dynamic-forms/ui-material 6.0.5 2018-06-02 19:38 UTC
Copyright (c) 2016-2017, Udo Sch√∂fer http://www.udos86.de

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/
import { DynamicFormControlComponent, DynamicFormLayoutService, DynamicFormValidationService, DynamicFormArrayComponent, DYNAMIC_FORM_CONTROL_TYPE_ARRAY, DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX, DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP, DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER, DYNAMIC_FORM_CONTROL_TYPE_GROUP, DYNAMIC_FORM_CONTROL_TYPE_INPUT, DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP, DYNAMIC_FORM_CONTROL_TYPE_SELECT, DYNAMIC_FORM_CONTROL_TYPE_SLIDER, DYNAMIC_FORM_CONTROL_TYPE_SWITCH, DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA, DynamicFormControlContainerComponent, DynamicTemplateDirective, DynamicFormComponent, DynamicFormService, DynamicFormsCoreModule } from '@ng-dynamic-forms/core';
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Optional, Output, ViewChild, ComponentFactoryResolver, ContentChildren, ViewContainerRef, ViewChildren, NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { MAT_RIPPLE_GLOBAL_OPTIONS, MAT_CHIPS_DEFAULT_OPTIONS, MAT_LABEL_GLOBAL_OPTIONS, MatInput, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MatAutocompleteModule, MatCheckboxModule, MatChipsModule, MatDatepickerModule, MatIconModule, MatInputModule, MatRadioModule, MatSelectModule, MatSliderModule, MatSlideToggleModule } from '@angular/material';
import { CommonModule } from '@angular/common';
import { TextMaskModule } from 'angular2-text-mask';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
class DynamicMaterialFormInputControlComponent extends DynamicFormControlComponent {
    /**
     * @param {?} layoutService
     * @param {?} validationService
     */
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
    }
    /**
     * @return {?}
     */
    get characterCount() {
        return this.matInput ? this.matInput.value.length : null;
    }
    /**
     * @return {?}
     */
    get characterHint() {
        return `${this.characterCount} / ${((/** @type {?} */ (this.model))).maxLength}`;
    }
    /**
     * @return {?}
     */
    get showCharacterHint() {
        return !!((/** @type {?} */ (this.model)).maxLength && this.characterCount);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DynamicMaterialCheckboxComponent extends DynamicFormControlComponent {
    /**
     * @param {?} layoutService
     * @param {?} validationService
     * @param {?} RIPPLE_OPTIONS
     */
    constructor(layoutService, validationService, RIPPLE_OPTIONS) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.RIPPLE_OPTIONS = RIPPLE_OPTIONS;
        this.bindId = true;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicMaterialCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-material-checkbox",
                template: "<ng-container [formGroup]=\"group\">\n\n    <mat-checkbox #matCheckbox\n                  [checked]=\"model.checked\"\n                  [color]=\"model.getAdditional('color', 'accent')\"\n                  [disableRipple]=\"model.getAdditional('disableRipple', RIPPLE_OPTIONS && RIPPLE_OPTIONS['disabled'] || false)\"\n                  [formControlName]=\"model.id\"\n                  [id]=\"bindId ? model.id : null\"\n                  [indeterminate]=\"model.indeterminate\"\n                  [labelPosition]=\"model.labelPosition || 'after'\"\n                  [name]=\"model.name\"\n                  [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\"\n                  (blur)=\"onBlur($event)\"\n                  (change)=\"onChange($event)\"\n                  (focus)=\"onFocus($event)\"\n                  (indeterminateChange)=\"onCustomEvent($event, 'indeterminateChange')\">\n\n        <span [ngClass]=\"getClass('element', 'label')\" [innerHTML]=\"model.label\"></span>\n\n    </mat-checkbox>\n\n</ng-container>",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
DynamicMaterialCheckboxComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService, },
    { type: DynamicFormValidationService, },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }, { type: Optional },] },
];
DynamicMaterialCheckboxComponent.propDecorators = {
    "bindId": [{ type: Input },],
    "group": [{ type: Input },],
    "layout": [{ type: Input },],
    "model": [{ type: Input },],
    "blur": [{ type: Output },],
    "change": [{ type: Output },],
    "customEvent": [{ type: Output },],
    "focus": [{ type: Output },],
    "matCheckbox": [{ type: ViewChild, args: ["matCheckbox",] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DynamicMaterialChipsComponent extends DynamicFormControlComponent {
    /**
     * @param {?} layoutService
     * @param {?} validationService
     * @param {?} CHIPS_OPTIONS
     * @param {?} LABEL_OPTIONS
     */
    constructor(layoutService, validationService, CHIPS_OPTIONS, LABEL_OPTIONS) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.CHIPS_OPTIONS = CHIPS_OPTIONS;
        this.LABEL_OPTIONS = LABEL_OPTIONS;
        this.bindId = true;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get model() {
        return this._model;
    }
    /**
     * @param {?} model
     * @return {?}
     */
    set model(model) {
        this.unsubscribe();
        this._model = model;
        this._model.valueUpdates.subscribe((value) => this.chipList = value);
        this.chipList = Array.isArray(model.value) ? /** @type {?} */ (model.value) : [];
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.unsubscribe();
    }
    /**
     * @return {?}
     */
    unsubscribe() {
        if (this._valueSubscription) {
            this._valueSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    get chipList() {
        return this._chipList;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set chipList(value) {
        this._chipList = value;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onChipInputTokenEnd($event) {
        let /** @type {?} */ inputElement = $event.input, /** @type {?} */
        inputValue = $event.value.trim();
        if (Array.isArray(this.chipList) && inputValue.length > 0) {
            this.chipList.push(inputValue);
            this.control.patchValue(this.chipList);
        }
        if (inputElement instanceof HTMLInputElement) {
            inputElement.value = "";
        }
    }
    /**
     * @param {?} chip
     * @param {?} index
     * @return {?}
     */
    onChipRemoved(chip, index) {
        if (Array.isArray(this.chipList) && this.chipList[index] === chip) {
            this.chipList.splice(index, 1);
            this.control.patchValue(this.chipList);
        }
    }
}
DynamicMaterialChipsComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-material-chips",
                template: "<mat-form-field [color]=\"model.getAdditional('color', 'primary')\"\n                [floatLabel]=\"model.getAdditional('floatLabel', LABEL_OPTIONS && LABEL_OPTIONS['float'] || 'auto')\"\n                [formGroup]=\"group\"\n                [hideRequiredMarker]=\"model.getAdditional('hideRequiredMarker', false)\"\n                [ngClass]=\"getClass('grid', 'control')\">\n\n    <mat-chip-list #matChipList\n                   [formControlName]=\"model.id\"\n                   [id]=\"bindId ? model.id : null\"\n                   [multiple]=\"true\">\n\n        <mat-chip *ngFor=\"let chip of chipList; let index = index\"\n                  [selectable]=\"false\"\n                  (removed)=\"onChipRemoved(chip, index)\">\n\n            <span>{{ chip }}</span>\n\n            <mat-icon matChipRemove>cancel</mat-icon>\n\n        </mat-chip>\n\n        <input matInput\n               [placeholder]=\"model.placeholder\"\n               [matChipInputFor]=\"matChipList\"\n               [matChipInputAddOnBlur]=\"model.getAdditional('matChipInputAddOnBlur', true)\"\n               [matChipInputSeparatorKeyCodes]=\"model.getAdditional('matChipInputSeparatorKeyCodes', CHIPS_OPTIONS['separatorKeyCodes'])\"\n               (matChipInputTokenEnd)=\"onChipInputTokenEnd($event)\"/>\n\n    </mat-chip-list>\n\n</mat-form-field>",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
DynamicMaterialChipsComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService, },
    { type: DynamicFormValidationService, },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] },] },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_LABEL_GLOBAL_OPTIONS,] }, { type: Optional },] },
];
DynamicMaterialChipsComponent.propDecorators = {
    "bindId": [{ type: Input },],
    "group": [{ type: Input },],
    "layout": [{ type: Input },],
    "model": [{ type: Input },],
    "blur": [{ type: Output },],
    "change": [{ type: Output },],
    "customEvent": [{ type: Output },],
    "focus": [{ type: Output },],
    "matChipList": [{ type: ViewChild, args: ["matChipList",] },],
    "matInput": [{ type: ViewChild, args: [MatInput,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DynamicMaterialDatePickerComponent extends DynamicFormControlComponent {
    /**
     * @param {?} layoutService
     * @param {?} validationService
     * @param {?} LABEL_OPTIONS
     */
    constructor(layoutService, validationService, LABEL_OPTIONS) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.LABEL_OPTIONS = LABEL_OPTIONS;
        this.bindId = true;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicMaterialDatePickerComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-material-datepicker",
                template: "<mat-form-field [color]=\"model.getAdditional('color', 'primary')\"\n                [floatLabel]=\"model.getAdditional('floatLabel', LABEL_OPTIONS && LABEL_OPTIONS['float'] || 'auto')\"\n                [formGroup]=\"group\"\n                [hideRequiredMarker]=\"model.getAdditional('hideRequiredMarker', false)\"\n                [ngClass]=\"getClass('grid', 'control')\">\n\n    <ng-container *ngIf=\"model.label\" ngProjectAs=\"mat-label\">\n\n        <mat-label>{{ model.label }}</mat-label>\n\n    </ng-container>\n\n    <span *ngIf=\"model.prefix\" matPrefix [innerHTML]=\"model.prefix\"></span>\n\n    <input matInput\n           [autofocus]=\"model.autoFocus\"\n           [formControlName]=\"model.id\"\n           [id]=\"bindId ? model.id : null\"\n           [max]=\"model.max\"\n           [matDatepicker]=\"matDatepicker\"\n           [min]=\"model.min\"\n           [name]=\"model.name\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [placeholder]=\"model.placeholder\"\n           [readonly]=\"model.readOnly\"\n           [required]=\"model.required\"\n           (blur)=\"onBlur($event)\"\n           (dateChange)=\"onChange($event)\"\n           (dateInput)=\"onCustomEvent($event, 'dateInput')\"\n           (focus)=\"onFocus($event)\"/>\n\n    <span *ngIf=\"model.suffix\" matSuffix [innerHTML]=\"model.suffix\"></span>\n\n    <mat-hint *ngIf=\"model.hint !== null\" align=\"start\" [innerHTML]=\"model.hint\"></mat-hint>\n\n\n    <mat-datepicker-toggle matSuffix [for]=\"matDatepicker\"></mat-datepicker-toggle>\n\n    <mat-datepicker #matDatepicker\n                    [opened]=\"model.getAdditional('opened', false)\"\n                    [startAt]=\"model.focusedDate\"\n                    [startView]=\"model.getAdditional('startView', 'month')\"\n                    [touchUi]=\"model.getAdditional('touchUi', false)\"\n                    (closed)=\"onCustomEvent($event, 'closed')\"\n                    (opened)=\"onCustomEvent($event, 'opened')\"></mat-datepicker>\n\n\n    <ng-container *ngFor=\"let message of errorMessages\" ngProjectAs=\"mat-error\">\n\n        <mat-error *ngIf=\"showErrorMessages\">{{ message }}</mat-error>\n\n    </ng-container>\n\n</mat-form-field>",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
DynamicMaterialDatePickerComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService, },
    { type: DynamicFormValidationService, },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_LABEL_GLOBAL_OPTIONS,] }, { type: Optional },] },
];
DynamicMaterialDatePickerComponent.propDecorators = {
    "bindId": [{ type: Input },],
    "group": [{ type: Input },],
    "layout": [{ type: Input },],
    "model": [{ type: Input },],
    "blur": [{ type: Output },],
    "change": [{ type: Output },],
    "customEvent": [{ type: Output },],
    "focus": [{ type: Output },],
    "matDatePicker": [{ type: ViewChild, args: ["matDatepicker",] },],
    "matInput": [{ type: ViewChild, args: [MatInput,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DynamicMaterialFormArrayComponent extends DynamicFormArrayComponent {
    /**
     * @param {?} layoutService
     * @param {?} validationService
     */
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.bindId = true;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicMaterialFormArrayComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-material-form-array",
                template: "<ng-container [formGroup]=\"group\">\n\n    <div [dynamicId]=\"bindId && model.id\"\n         [formArrayName]=\"model.id\"\n         [ngClass]=\"getClass('element', 'control')\">\n\n        <div *ngFor=\"let groupModel of model.groups; let idx = index\" role=\"group\"\n             [formGroupName]=\"idx\" [ngClass]=\"[getClass('element', 'group'), getClass('grid', 'group')]\">\n\n            <ng-container *ngTemplateOutlet=\"startTemplate?.templateRef; context: groupModel\"></ng-container>\n\n            <dynamic-material-form-control *ngFor=\"let _model of groupModel.group\"\n                                           [bindId]=\"false\"\n                                           [context]=\"groupModel\"\n                                           [group]=\"control.at(idx)\"\n                                           [hidden]=\"_model.hidden\"\n                                           [layout]=\"layout\"\n                                           [model]=\"_model\"\n                                           [templates]=\"templates\"\n                                           [ngClass]=\"[getClass('element', 'host', _model), getClass('grid', 'host', _model)]\"\n                                           (blur)=\"onBlur($event)\"\n                                           (change)=\"onChange($event)\"\n                                           (focus)=\"onFocus($event)\"\n                                           (matEvent)=\"onCustomEvent($event, null, true)\"></dynamic-material-form-control>\n\n            <ng-container *ngTemplateOutlet=\"endTemplate?.templateRef; context: groupModel\"></ng-container>\n\n        </div>\n\n    </div>\n\n</ng-container>"
            }] }
];
/** @nocollapse */
DynamicMaterialFormArrayComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService, },
    { type: DynamicFormValidationService, },
];
DynamicMaterialFormArrayComponent.propDecorators = {
    "bindId": [{ type: Input },],
    "group": [{ type: Input },],
    "layout": [{ type: Input },],
    "model": [{ type: Input },],
    "templates": [{ type: Input },],
    "blur": [{ type: Output },],
    "change": [{ type: Output },],
    "customEvent": [{ type: Output },],
    "focus": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DynamicMaterialFormGroupComponent extends DynamicFormControlComponent {
    /**
     * @param {?} layoutService
     * @param {?} validationService
     */
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.bindId = true;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicMaterialFormGroupComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-material-form-group",
                template: "<ng-container [formGroup]=\"group\">\n\n    <div role=\"group\"\n         [dynamicId]=\"bindId && model.id\"\n         [formGroupName]=\"model.id\"\n         [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\">\n\n        <dynamic-material-form-control *ngFor=\"let _model of model.group\"\n                                       [group]=\"control\"\n                                       [hidden]=\"_model.hidden\"\n                                       [layout]=\"layout\"\n                                       [model]=\"_model\"\n                                       [templates]=\"templates\"\n                                       [ngClass]=\"[getClass('element', 'host', _model), getClass('grid', 'host', _model)]\"\n                                       (blur)=\"onBlur($event)\"\n                                       (change)=\"onChange($event)\"\n                                       (focus)=\"onFocus($event)\"\n                                       (matEvent)=\"onCustomEvent($event, null, true)\"></dynamic-material-form-control>\n    </div>\n\n</ng-container>"
            }] }
];
/** @nocollapse */
DynamicMaterialFormGroupComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService, },
    { type: DynamicFormValidationService, },
];
DynamicMaterialFormGroupComponent.propDecorators = {
    "bindId": [{ type: Input },],
    "group": [{ type: Input },],
    "layout": [{ type: Input },],
    "model": [{ type: Input },],
    "templates": [{ type: Input },],
    "blur": [{ type: Output },],
    "change": [{ type: Output },],
    "customEvent": [{ type: Output },],
    "focus": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DynamicMaterialInputComponent extends DynamicMaterialFormInputControlComponent {
    /**
     * @param {?} layoutService
     * @param {?} validationService
     * @param {?} AUTOCOMPLETE_OPTIONS
     * @param {?} LABEL_OPTIONS
     * @param {?} RIPPLE_OPTIONS
     */
    constructor(layoutService, validationService, AUTOCOMPLETE_OPTIONS, LABEL_OPTIONS, RIPPLE_OPTIONS) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.AUTOCOMPLETE_OPTIONS = AUTOCOMPLETE_OPTIONS;
        this.LABEL_OPTIONS = LABEL_OPTIONS;
        this.RIPPLE_OPTIONS = RIPPLE_OPTIONS;
        this.bindId = true;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicMaterialInputComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-material-input",
                template: "<mat-form-field [color]=\"model.getAdditional('color', 'primary')\"\n                [floatLabel]=\"model.getAdditional('floatLabel', LABEL_OPTIONS && LABEL_OPTIONS['float'] || 'auto')\"\n                [formGroup]=\"group\"\n                [hideRequiredMarker]=\"model.getAdditional('hideRequiredMarker', false)\"\n                [ngClass]=\"getClass('grid','control')\"\n                [textMask]=\"{mask: (model.mask || false), showMask: model.mask && !(model.placeholder)}\">\n\n    <ng-container *ngIf=\"model.label\" ngProjectAs=\"mat-label\">\n\n        <mat-label>{{ model.label }}</mat-label>\n\n    </ng-container>\n\n    <span *ngIf=\"model.prefix\" matPrefix [innerHTML]=\"model.prefix\"></span>\n\n    <input matInput\n           [attr.accept]=\"model.accept\"\n           [attr.list]=\"model.listId\"\n           [attr.max]=\"model.max\"\n           [attr.min]=\"model.min\"\n           [attr.multiple]=\"model.multiple\"\n           [attr.step]=\"model.step\"\n           [autocomplete]=\"model.autoComplete\"\n           [autofocus]=\"model.autoFocus\"\n           [formControlName]=\"model.id\"\n           [id]=\"bindId ? model.id : null\"\n           [maxlength]=\"model.maxLength\"\n           [matAutocomplete]=\"matAutocomplete\"\n           [minlength]=\"model.minLength\"\n           [name]=\"model.name\"\n           [ngClass]=\"getClass('element', 'control')\"\n           [pattern]=\"model.pattern\"\n           [placeholder]=\"model.placeholder\"\n           [readonly]=\"model.readOnly\"\n           [required]=\"model.required\"\n           [spellcheck]=\"model.spellCheck\"\n           [tabindex]=\"model.tabIndex\"\n           [type]=\"model.inputType\"\n           (blur)=\"onBlur($event)\"\n           (change)=\"onChange($event)\"\n           (focus)=\"onFocus($event)\"/>\n\n    <span *ngIf=\"model.suffix\" matSuffix [innerHTML]=\"model.suffix\"></span>\n\n    <mat-hint *ngIf=\"model.hint !== null\" align=\"start\" [innerHTML]=\"model.hint\"></mat-hint>\n\n    <mat-hint *ngIf=\"showCharacterHint\" align=\"end\">{{ characterHint }}</mat-hint>\n\n    <ng-container *ngFor=\"let message of errorMessages\" ngProjectAs=\"mat-error\">\n\n        <mat-error *ngIf=\"showErrorMessages\">{{ message }}</mat-error>\n\n    </ng-container>\n\n</mat-form-field>\n\n<mat-autocomplete #matAutocomplete=\"matAutocomplete\"\n                  [autoActiveFirstOption]=\"model.getAdditional('autoActiveFirstOption', AUTOCOMPLETE_OPTIONS['autoActiveFirstOption'])\"\n                  [disableRipple]=\"model.getAdditional('disableRipple', RIPPLE_OPTIONS && RIPPLE_OPTIONS['disabled'] || false)\"\n                  (optionSelected)=\"onChange($event)\">\n\n    <mat-option *ngFor=\"let option of model.list\" [value]=\"option\">{{ option }}</mat-option>\n\n</mat-autocomplete>",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
DynamicMaterialInputComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService, },
    { type: DynamicFormValidationService, },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] },] },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_LABEL_GLOBAL_OPTIONS,] }, { type: Optional },] },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }, { type: Optional },] },
];
DynamicMaterialInputComponent.propDecorators = {
    "bindId": [{ type: Input },],
    "group": [{ type: Input },],
    "layout": [{ type: Input },],
    "model": [{ type: Input },],
    "blur": [{ type: Output },],
    "change": [{ type: Output },],
    "customEvent": [{ type: Output },],
    "focus": [{ type: Output },],
    "matAutocomplete": [{ type: ViewChild, args: ["matAutocomplete",] },],
    "matInput": [{ type: ViewChild, args: [MatInput,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DynamicMaterialRadioGroupComponent extends DynamicFormControlComponent {
    /**
     * @param {?} layoutService
     * @param {?} validationService
     */
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.bindId = true;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicMaterialRadioGroupComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-material-radio-group",
                template: "<ng-container [formGroup]=\"group\">\n\n    <mat-radio-group #matRadioGroup\n                     [formControlName]=\"model.id\"\n                     [id]=\"bindId ? model.id : null\"\n                     [labelPosition]=\"model.getAdditional('labelPosition', 'after')\"\n                     [name]=\"model.name\"\n                     [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\"\n                     (blur)=\"onBlur($event)\"\n                     (change)=\"onChange($event)\"\n                     (focus)=\"onFocus($event)\">\n\n        <mat-radio-button *ngFor=\"let option of model.options$ | async\"\n                          [name]=\"model.name\"\n                          [ngClass]=\"getClass('element', 'option')\"\n                          [value]=\"option.value\"><span [innerHTML]=\"option.label\"></span></mat-radio-button>\n\n    </mat-radio-group>\n\n</ng-container>",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
DynamicMaterialRadioGroupComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService, },
    { type: DynamicFormValidationService, },
];
DynamicMaterialRadioGroupComponent.propDecorators = {
    "bindId": [{ type: Input },],
    "group": [{ type: Input },],
    "layout": [{ type: Input },],
    "model": [{ type: Input },],
    "blur": [{ type: Output },],
    "change": [{ type: Output },],
    "customEvent": [{ type: Output },],
    "focus": [{ type: Output },],
    "matRadioGroup": [{ type: ViewChild, args: ["matRadioGroup",] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DynamicMaterialSelectComponent extends DynamicFormControlComponent {
    /**
     * @param {?} layoutService
     * @param {?} validationService
     * @param {?} LABEL_OPTIONS
     * @param {?} RIPPLE_OPTIONS
     */
    constructor(layoutService, validationService, LABEL_OPTIONS, RIPPLE_OPTIONS) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.LABEL_OPTIONS = LABEL_OPTIONS;
        this.RIPPLE_OPTIONS = RIPPLE_OPTIONS;
        this.bindId = true;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicMaterialSelectComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-material-select",
                template: "<mat-form-field [color]=\"model.getAdditional('color', 'primary')\"\n                [ngClass]=\"getClass('grid', 'control')\"\n                [floatLabel]=\"model.getAdditional('floatLabel', LABEL_OPTIONS && LABEL_OPTIONS['float'] || 'auto')\"\n                [formGroup]=\"group\">\n\n    <ng-container *ngIf=\"model.label\" ngProjectAs=\"mat-label\">\n\n        <mat-label>{{ model.label }}</mat-label>\n\n    </ng-container>\n\n    <span *ngIf=\"model.prefix\" matPrefix [innerHTML]=\"model.prefix\"></span>\n\n    <mat-select #matSelect\n                [disableRipple]=\"model.getAdditional('disableRipple', RIPPLE_OPTIONS && RIPPLE_OPTIONS['disabled'] || false)\"\n                [formControlName]=\"model.id\"\n                [id]=\"bindId ? model.id : null\"\n                [multiple]=\"model.multiple\"\n                [ngClass]=\"getClass('element', 'control')\"\n                [placeholder]=\"model.placeholder\"\n                [required]=\"model.required\"\n                (openedChange)=\"onCustomEvent($event, 'openedChange')\"\n                (selectionChange)=\"onChange($event)\">\n\n        <mat-option *ngFor=\"let option of model.options$ | async\"\n                    [ngClass]=\"getClass('element', 'option')\"\n                    [value]=\"option.value\"><span [innerHTML]=\"option.label\"></span></mat-option>\n    </mat-select>\n\n    <span *ngIf=\"model.suffix\" matSuffix [innerHTML]=\"model.suffix\"></span>\n\n    <mat-hint *ngIf=\"model.hint !== null\" align=\"start\" [innerHTML]=\"model.hint\"></mat-hint>\n\n    <ng-container *ngFor=\"let message of errorMessages\" ngProjectAs=\"mat-error\">\n\n        <mat-error *ngIf=\"showErrorMessages\">{{ message }}</mat-error>\n\n    </ng-container>\n\n</mat-form-field>",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
DynamicMaterialSelectComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService, },
    { type: DynamicFormValidationService, },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_LABEL_GLOBAL_OPTIONS,] }, { type: Optional },] },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }, { type: Optional },] },
];
DynamicMaterialSelectComponent.propDecorators = {
    "bindId": [{ type: Input },],
    "group": [{ type: Input },],
    "layout": [{ type: Input },],
    "model": [{ type: Input },],
    "blur": [{ type: Output },],
    "change": [{ type: Output },],
    "customEvent": [{ type: Output },],
    "focus": [{ type: Output },],
    "matSelect": [{ type: ViewChild, args: ["matSelect",] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DynamicMaterialSlideToggleComponent extends DynamicFormControlComponent {
    /**
     * @param {?} layoutService
     * @param {?} validationService
     * @param {?} RIPPLE_OPTIONS
     */
    constructor(layoutService, validationService, RIPPLE_OPTIONS) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.RIPPLE_OPTIONS = RIPPLE_OPTIONS;
        this.bindId = true;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicMaterialSlideToggleComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-material-slide-toggle",
                template: "<ng-container [formGroup]=\"group\">\n\n    <mat-slide-toggle #matSlideToggle\n                      [checked]=\"model.checked\"\n                      [color]=\"model.getAdditional('color', 'accent')\"\n                      [disableRipple]=\"model.getAdditional('disableRipple', RIPPLE_OPTIONS && RIPPLE_OPTIONS['disabled'] || false)\"\n                      [formControlName]=\"model.id\"\n                      [id]=\"bindId ? model.id : null\"\n                      [labelPosition]=\"model.labelPosition || 'after'\"\n                      [name]=\"model.name\"\n                      [ngClass]=\"[getClass('element','control'), getClass('grid','control')]\"\n                      (change)=\"onChange($event)\">\n\n        <span *ngIf=\"!model.checked\" [innerHTML]=\"model.offLabel\"></span>\n        <span *ngIf=\"model.checked\" [innerHTML]=\"model.onLabel\"></span>\n\n    </mat-slide-toggle>\n\n</ng-container>",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
DynamicMaterialSlideToggleComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService, },
    { type: DynamicFormValidationService, },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }, { type: Optional },] },
];
DynamicMaterialSlideToggleComponent.propDecorators = {
    "bindId": [{ type: Input },],
    "group": [{ type: Input },],
    "layout": [{ type: Input },],
    "model": [{ type: Input },],
    "blur": [{ type: Output },],
    "change": [{ type: Output },],
    "customEvent": [{ type: Output },],
    "focus": [{ type: Output },],
    "matSlideToggle": [{ type: ViewChild, args: ["matSlideToggle",] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DynamicMaterialSliderComponent extends DynamicFormControlComponent {
    /**
     * @param {?} layoutService
     * @param {?} validationService
     */
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.bindId = true;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicMaterialSliderComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-material-slider",
                template: "<ng-container [formGroup]=\"group\">\n\n    <mat-slider #matSlider\n                [color]=\"model.getAdditional('color', 'accent')\"\n                [formControlName]=\"model.id\"\n                [id]=\"bindId ? model.id : null\"\n                [invert]=\"model.getAdditional('invert', false)\"\n                [min]=\"model.min\"\n                [max]=\"model.max\"\n                [ngClass]=\"[getClass('element', 'control'), getClass('grid', 'control')]\"\n                [step]=\"model.step\"\n                [tabIndex]=\"model.tabIndex\"\n                [thumbLabel]=\"model.getAdditional('thumbLabel', true)\"\n                [tickInterval]=\"model.getAdditional('tickInterval', 1)\"\n                [vertical]=\"model.vertical\"\n                (change)=\"onChange($event)\"\n                (input)=\"onCustomEvent($event, 'input')\"></mat-slider>\n\n</ng-container>",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
DynamicMaterialSliderComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService, },
    { type: DynamicFormValidationService, },
];
DynamicMaterialSliderComponent.propDecorators = {
    "bindId": [{ type: Input },],
    "group": [{ type: Input },],
    "layout": [{ type: Input },],
    "model": [{ type: Input },],
    "blur": [{ type: Output },],
    "change": [{ type: Output },],
    "customEvent": [{ type: Output },],
    "focus": [{ type: Output },],
    "matSlider": [{ type: ViewChild, args: ["matSlider",] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DynamicMaterialTextAreaComponent extends DynamicMaterialFormInputControlComponent {
    /**
     * @param {?} layoutService
     * @param {?} validationService
     * @param {?} LABEL_OPTIONS
     */
    constructor(layoutService, validationService, LABEL_OPTIONS) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.LABEL_OPTIONS = LABEL_OPTIONS;
        this.bindId = true;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.customEvent = new EventEmitter();
        this.focus = new EventEmitter();
    }
}
DynamicMaterialTextAreaComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-material-textarea",
                template: "<mat-form-field [color]=\"model.getAdditional('color', 'primary')\"\n                [floatLabel]=\"model.getAdditional('floatLabel', LABEL_OPTIONS && LABEL_OPTIONS['float'] || 'auto')\"\n                [formGroup]=\"group\"\n                [hideRequiredMarker]=\"model.getAdditional('hideRequiredMarker', false)\"\n                [ngClass]=\"getClass('grid', 'control')\">\n\n    <ng-container *ngIf=\"model.label\" ngProjectAs=\"mat-label\">\n\n        <mat-label>{{ model.label }}</mat-label>\n\n    </ng-container>\n\n    <textarea matInput\n              [cols]=\"model.cols\"\n              [formControlName]=\"model.id\"\n              [id]=\"bindId ? model.id : null\"\n              [maxlength]=\"model.maxLength\"\n              [minlength]=\"model.minLength\"\n              [name]=\"model.name\"\n              [ngClass]=\"getClass('element', 'control')\"\n              [placeholder]=\"model.placeholder\"\n              [readonly]=\"model.readOnly\"\n              [required]=\"model.required\"\n              [rows]=\"model.rows\"\n              [spellcheck]=\"model.spellCheck\"\n              [tabindex]=\"model.tabIndex\"\n              [wrap]=\"model.wrap\"\n              (blur)=\"onBlur($event)\"\n              (change)=\"onChange($event)\"\n              (focus)=\"onFocus($event)\"></textarea>\n\n    <mat-hint *ngIf=\"model.hint !== null\" align=\"start\" [innerHTML]=\"model.hint\"></mat-hint>\n\n    <mat-hint *ngIf=\"showCharacterHint\" align=\"end\">{{ characterHint }}</mat-hint>\n\n    <ng-container *ngFor=\"let message of errorMessages\" ngProjectAs=\"mat-error\">\n\n        <mat-error *ngIf=\"showErrorMessages\">{{ message }}</mat-error>\n\n    </ng-container>\n\n</mat-form-field>",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
DynamicMaterialTextAreaComponent.ctorParameters = () => [
    { type: DynamicFormLayoutService, },
    { type: DynamicFormValidationService, },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_LABEL_GLOBAL_OPTIONS,] }, { type: Optional },] },
];
DynamicMaterialTextAreaComponent.propDecorators = {
    "bindId": [{ type: Input },],
    "group": [{ type: Input },],
    "layout": [{ type: Input },],
    "model": [{ type: Input },],
    "blur": [{ type: Output },],
    "change": [{ type: Output },],
    "customEvent": [{ type: Output },],
    "focus": [{ type: Output },],
    "matInput": [{ type: ViewChild, args: [MatInput,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DynamicMaterialFormControlContainerComponent extends DynamicFormControlContainerComponent {
    /**
     * @param {?} componentFactoryResolver
     * @param {?} layoutService
     * @param {?} validationService
     */
    constructor(componentFactoryResolver, layoutService, validationService) {
        super(componentFactoryResolver, layoutService, validationService);
        this.componentFactoryResolver = componentFactoryResolver;
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.bindId = true;
        this.context = null;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.customEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get componentType() {
        return this.layoutService.getCustomComponentType(this.model) || materialUIFormControlMapFn(this.model);
    }
    /**
     * @return {?}
     */
    get hasMatFormField() {
        let /** @type {?} */ matFormFieldTypes = [DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER, DYNAMIC_FORM_CONTROL_TYPE_INPUT,
            DYNAMIC_FORM_CONTROL_TYPE_SELECT, DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA];
        return matFormFieldTypes.some(type => this.model.type === type);
    }
}
DynamicMaterialFormControlContainerComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-material-form-control",
                template: "<div [formGroup]=\"group\" [ngClass]=\"[getClass('element', 'container'), getClass('grid', 'container')]\">\n\n    <label *ngIf=\"!hasMatFormField && !isCheckbox && hasLabel\"\n           [for]=\"model.id\"\n           [innerHTML]=\"model.label\"\n           [ngClass]=\"[getClass('element', 'label'), getClass('grid', 'label')]\"></label>\n\n    <ng-container *ngTemplateOutlet=\"startTemplate?.templateRef; context: model\"></ng-container>\n\n    <ng-container #componentViewContainer></ng-container>\n\n    <ng-container *ngIf=\"!hasMatFormField && showErrorMessages\">\n\n        <mat-error *ngFor=\"let message of errorMessages\">{{ message }}</mat-error>\n\n    </ng-container>\n\n    <ng-container *ngTemplateOutlet=\"endTemplate?.templateRef; context: model\"></ng-container>\n\n    <ng-content></ng-content>\n\n</div>"
            }] }
];
/** @nocollapse */
DynamicMaterialFormControlContainerComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver, },
    { type: DynamicFormLayoutService, },
    { type: DynamicFormValidationService, },
];
DynamicMaterialFormControlContainerComponent.propDecorators = {
    "contentTemplateList": [{ type: ContentChildren, args: [DynamicTemplateDirective,] },],
    "inputTemplateList": [{ type: Input, args: ["templates",] },],
    "bindId": [{ type: Input },],
    "context": [{ type: Input },],
    "group": [{ type: Input },],
    "layout": [{ type: Input },],
    "model": [{ type: Input },],
    "blur": [{ type: Output },],
    "change": [{ type: Output },],
    "focus": [{ type: Output },],
    "customEvent": [{ type: Output, args: ["matEvent",] },],
    "componentViewContainerRef": [{ type: ViewChild, args: ["componentViewContainer", { read: ViewContainerRef },] },],
};
/**
 * @param {?} model
 * @return {?}
 */
function materialUIFormControlMapFn(model) {
    switch (model.type) {
        case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:
            return DynamicMaterialFormArrayComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:
            return DynamicMaterialCheckboxComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:
            return DynamicMaterialFormGroupComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:
            return DynamicMaterialDatePickerComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_GROUP:
            return DynamicMaterialFormGroupComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_INPUT:
            let /** @type {?} */ inputModel = /** @type {?} */ (model);
            return inputModel.multiple ? DynamicMaterialChipsComponent : DynamicMaterialInputComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:
            return DynamicMaterialRadioGroupComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_SELECT:
            return DynamicMaterialSelectComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_SLIDER:
            return DynamicMaterialSliderComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_SWITCH:
            return DynamicMaterialSlideToggleComponent;
        case DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:
            return DynamicMaterialTextAreaComponent;
        default:
            return null;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DynamicMaterialFormComponent extends DynamicFormComponent {
    /**
     * @param {?} formService
     * @param {?} layoutService
     */
    constructor(formService, layoutService) {
        super(formService, layoutService);
        this.formService = formService;
        this.layoutService = layoutService;
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.customEvent = new EventEmitter();
    }
}
DynamicMaterialFormComponent.decorators = [
    { type: Component, args: [{
                selector: "dynamic-material-form",
                template: "<dynamic-material-form-control *ngFor=\"let model of formModel; trackBy: trackByFn\"\n                               [group]=\"formGroup\"\n                               [hidden]=\"model.hidden\"\n                               [layout]=\"formLayout\"\n                               [model]=\"model\"\n                               [ngClass]=\"[getClass(model, 'element', 'host'), getClass(model, 'grid', 'host')]\"\n                               [templates]=\"templates\"\n                               (blur)=\"onEvent($event, 'blur')\"\n                               (change)=\"onEvent($event, 'change')\"\n                               (focus)=\"onEvent($event, 'focus')\"\n                               (matEvent)=\"onEvent($event, 'custom')\"></dynamic-material-form-control>"
            }] }
];
/** @nocollapse */
DynamicMaterialFormComponent.ctorParameters = () => [
    { type: DynamicFormService, },
    { type: DynamicFormLayoutService, },
];
DynamicMaterialFormComponent.propDecorators = {
    "formGroup": [{ type: Input, args: ["group",] },],
    "formModel": [{ type: Input, args: ["model",] },],
    "formLayout": [{ type: Input, args: ["layout",] },],
    "blur": [{ type: Output },],
    "change": [{ type: Output },],
    "focus": [{ type: Output },],
    "customEvent": [{ type: Output, args: ["matEvent",] },],
    "templates": [{ type: ContentChildren, args: [DynamicTemplateDirective,] },],
    "components": [{ type: ViewChildren, args: [DynamicMaterialFormControlContainerComponent,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DynamicFormsMaterialUIModule {
}
DynamicFormsMaterialUIModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    MatAutocompleteModule,
                    MatCheckboxModule,
                    MatChipsModule,
                    MatDatepickerModule,
                    MatIconModule,
                    MatInputModule,
                    MatRadioModule,
                    MatSelectModule,
                    MatSliderModule,
                    MatSlideToggleModule,
                    TextMaskModule,
                    DynamicFormsCoreModule
                ],
                declarations: [
                    DynamicMaterialCheckboxComponent,
                    DynamicMaterialChipsComponent,
                    DynamicMaterialDatePickerComponent,
                    DynamicMaterialFormArrayComponent,
                    DynamicMaterialFormGroupComponent,
                    DynamicMaterialInputComponent,
                    DynamicMaterialRadioGroupComponent,
                    DynamicMaterialSelectComponent,
                    DynamicMaterialSlideToggleComponent,
                    DynamicMaterialSliderComponent,
                    DynamicMaterialTextAreaComponent,
                    DynamicMaterialFormControlContainerComponent,
                    DynamicMaterialFormComponent
                ],
                entryComponents: [
                    DynamicMaterialCheckboxComponent,
                    DynamicMaterialChipsComponent,
                    DynamicMaterialDatePickerComponent,
                    DynamicMaterialFormArrayComponent,
                    DynamicMaterialFormGroupComponent,
                    DynamicMaterialInputComponent,
                    DynamicMaterialRadioGroupComponent,
                    DynamicMaterialSelectComponent,
                    DynamicMaterialSlideToggleComponent,
                    DynamicMaterialSliderComponent,
                    DynamicMaterialTextAreaComponent
                ],
                exports: [
                    DynamicFormsCoreModule,
                    DynamicMaterialFormControlContainerComponent,
                    DynamicMaterialFormComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { DynamicMaterialFormInputControlComponent, DynamicMaterialCheckboxComponent, DynamicMaterialChipsComponent, DynamicMaterialDatePickerComponent, DynamicMaterialFormArrayComponent, DynamicMaterialFormGroupComponent, DynamicMaterialInputComponent, DynamicMaterialRadioGroupComponent, DynamicMaterialSelectComponent, DynamicMaterialSlideToggleComponent, DynamicMaterialSliderComponent, DynamicMaterialTextAreaComponent, DynamicMaterialFormComponent, DynamicMaterialFormControlContainerComponent, materialUIFormControlMapFn, DynamicFormsMaterialUIModule };
//# sourceMappingURL=ui-material.js.map
